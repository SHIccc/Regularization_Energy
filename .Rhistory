Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette ="gglpot2")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette =ggplot2)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "colorblind")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel", node.width =1)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel", node.width =3)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel", shape="square")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel", shape="square",label.cex=1)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel", shape="square",label.cex=1, node.width=2)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="square",label.cex=1, node.width=2, label.scale=F)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="square",label.cex=1, label.scale=F)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="square",label.cex=1, label.scale=F)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="square",label.cex=1, label.scale.equal=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2, label.scale.equal=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
qgraph(Q, layout = "spring", legend = FALSE)
agraph(Q, vsize=1)
qgraph(Q, vsize=1)
Q=qgraph(dd1, groups=mygroup, vsize=1, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
qgraph(Q, vsize=1, label.cex = 4)
Q=qgraph(dd1, groups=mygroup, vsize=1, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=4, label.scale.equal=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, legend =T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="diamond",label.cex=2.5, label.scale.equal=T)
#GI contract
GIconn = dd[1:7,1:7]
GIconn
#GT contract
GTconn = dd[8:14,8:14]
#HP contract
HPconn = dd[15:20,15:20]
#GJ contract
GJconn = dd[21:27,21:27]
#HI
HIconn = dd[28:34,28:34]
#NE
NEconn = dd[35:40, 35:40]
#POA
POAconn =dd[41:47,41:47]
#PDA
PDAconn = dd[48:54,48:54]
#PBA
PBAconn = dd[55:60,55:60]
#LPXBHR
LPXBHRconn = dd[61:84,61:84]
#xtable(LPXBHRconn[,1:8])
#xtable(LPXBHRconn[,9:16])
xtable(LPXBHRconn[,17:24])
#LPXBHxx
LPXBHxxconn = dd[85:90, 85:90]
#Table 4.1
library(xtable)
sectorname = c("GI","GT","HP","GJ","HI","NE","POA","PDA","PBA","LPXBHR","LPXBHxx")
secconn = matrix(0, length(sectorname), length(sectorname))
mr= c(7,14,20,27,34,40,47,54,60,84,90)
mc= c(0,7,14,20,27,34,40,47,54,60,84)
for(i in 1:11){
for(j in 1:11){
secconn[i,j] = sum(dd[(mc[i]+1):mr[i],(mc[j]+1):mr[j] ])
}
}
rownames(secconn)=colnames(secconn)=sectorname
secconn1=secconn%*%solve(diag(c(7,7,6,7,7,6,7,7,6,24,6)))
colnames(secconn1)=sectorname
from = rowSums(secconn1)
to = colSums(secconn1)
secconn2 = rbind(secconn1, to)
qgraph(secconn1, palette="colorbind")
qgraph(secconn1, palette="colorblind")
Q=qgraph(dd1, groups=tab41[,1], vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
qgraph(secconn1, groups=sectorname, palette="colorblind")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="diamond",label.cex=2.5, label.scale.equal=T, layout="groups")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="diamond",label.cex=2.5, label.scale.equal=T, layout="spring")
qgraph(secconn2, groups=sectorname, palette="colorblind")
qgraph(secconn2, palette="colorblind")
secconn2 = rbind(secconn1, to)
secconn2 = cbind(secconn2, c(from, sum(to)))
qgraph(secconn1, palette="colorblind")
myd
myd=secconn1
diag(myd)=0
qgraph(myd, palette="colorblind")
qgraph(myd, groups = sectorname, palette="colorblind")
qgraph(myd, palette="colorblind", layout="circle")
qgraph(myd, palette="pastel", layout="circle")
qgraph(myd, palette="pastel", layout="circle", groups=sectorname)
qgraph(myd, palette="pastel", layout="circle", groups=sectorname, legend =F)
qgraph(LPXBHRconn, palette="pastel", layout="circle", legend =F)
mylp
mylp = LPXBHRconn
diag(mylp)=0
qgraph(LPXBHRconn, palette="pastel", layout="circle", legend =F)
qgraph(mylp, palette="pastel", layout="circle", legend =F)
qgraph(mylp, palette="pastel", layout="circle", legend =F, minimum=0.05)
qgraph(mylp, palette="pastel", layout="circle", legend =F, minimum=0.08)
qgraph(mylp, palette="pastel", layout="circle", legend =F, minimum=0.1)
qgraph(mylp, palette="pastel", layout="spring", legend =F, minimum=0.1)
qgraph(mylp, palette="gray", layout="spring", legend =F, minimum=0.1)
diag(myhp) = 0
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.1)
myhp=HPconn
diag(myhp) = 0
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.1)
qgraph(myhp, palette="gray", layout="spring", legend =F)
qgraph(myhp, palette="gray", layout="circle", legend =F)
myhp
mylp
rowSums(mylp)
rowSums(LPXBHRconn)
table(rowSums(LPXBHRconn))
order(rowSums(LPXBHRconn))
order(colSums(LPXBHRconn))
colSums(LPXBHRconn)[order(colSums(LPXBHRconn))]
colSums(LPXBHRconn)[order(colSums(LPXBHRconn), decreasing = T)]
lptab
rowSums(LPXBHRconn)[order(rowSums(LPXBHRconn), decreasing = T)]
lptab = cbind(rowSums(LPXBHRconn)[order(rowSums(LPXBHRconn), decreasing = T)],
colSums(LPXBHRconn)[order(colSums(LPXBHRconn), decreasing = T)])
lptab
xtable(lptab)
25.79+18.95+17.52+15.88
20.17+18.62+17.38+15.63
78.14/146.12
secconn2
to-from
xtable(to-from)
ft
ft=to-from
xtable(ft)
sum(ft)
ft
abs(ft)
sum(abs(ft))
1.22/27.01
1.10179/27.01
22/70.4
20.8/27
20.85/27.00487
lptab = cbind(rowSums(LPXBHRconn)[order(rowSums(LPXBHRconn), decreasing = T)],
colSums(LPXBHRconn)[order(colSums(LPXBHRconn), decreasing = T)],
(colSums(LPXBHRconn)[order(colSums(LPXBHRconn), decreasing = T)]-
rowSums(LPXBHRconn)[order(rowSums(LPXBHRconn), decreasing = T)] ))
xtable(lptab)
qgraph(secconn)
qgraph(LPXBHRconn)
qgraph(HPconn, minimum=0.9)
myhp
myhp=HPconn
qgraph(mylp, palette="gray", layout="spring", legend =F, minimum=0.9)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.9)
myhp=HPconn
diag(myhp)=0
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.9)
qgraph(myhp, palette="gray", layout="circle", legend =F, minimum=0.9)
qgraph(myhp, palette="gray", layout="circle", legend =F, minimum=0.9, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.9, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =T, minimum=0.9, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.9, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.85, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.89, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.7, arrow =T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
Q=qgraph(myhp, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
Q=qgraph(myhp,  vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
Q=qgraph(myhp,  vsize=2.5, minimum = 0.78, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
Q=qgraph(myhp,  vsize=4, minimum = 0.78, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
Q=qgraph(myhp,  vsize=4, minimum = 0.78, palette = "pastel",
shape="circle",label.cex=4, label.scale.equal=T)
myne
myne = NEconn
diag(myne)=0
qgraph(myne, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
par(mfrow = c(1,2))
qgraph(myhp, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
qgraph(myne, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
myhn
c(15:20,35:40)
myhn = dd[c(15:20,35:40),c(15:20,35:40)]
myhn
diag(myhn)=0
qgraph(myhn, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
par(mfrow=c(1,1))
myhn = dd[c(15:20,35:40),c(15:20,35:40)]
qgraph(myhn, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
par(mfrow=c(1,1))
myhn = dd[c(15:20,35:40),c(15:20,35:40)]
diag(myhn)=0
qgraph(myhn, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T)
hng=rbind(15:20,35:40)
qgraph(myhn, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T, groups = hng)
hng=cbind(15:20,35:40)
qgraph(myhn, palette="gray", layout="spring", legend =F, minimum=0.78, arrow =T, groups = hng)
qgraph(myhn, palette="colorblind", legend =T, minimum=0.78, arrow =T, groups = hng)
HP
NE
myhn = dd[c(15:20,35:40),c(15:20,35:40)]
diag(myhn)=0
HP=c(15:20)
NE=c(35:40)
hng=cbind(HP, NE)
qgraph(myhn, palette="colorblind", legend =T, minimum=0.78, arrow =T, groups = hng)
hng=rbind(HP, NE)
qgraph(myhn, palette="colorblind", legend =T, minimum=0.78, arrow =T, groups = hng)
hng=list(HP, NE)
qgraph(myhn, palette="colorblind", legend =T, minimum=0.78, arrow =T, groups = hng)
qgraph(myhn, legend =T, minimum=0.78, arrow =T, groups = hng)
qgraph(myhn)
qgraph(myhn, minimum=0.78)
HP=c(15:20)
NE=c(35:40)
hng=list(HP, NE)
c(1,2)
c(1:2)
qgraph(myhn, minimum=0.78, groups = hng)
str(myne)
str(myhn)
hng
qgraph(myhn, groups = hng)
HP=c(1:5)
NE=c(6:10)
HP=c(1:6)
NE=c(7:12)
hng=list(HP, NE)
qgraph(myhn, groups = hng)
qgraph(myhn, palette="colorblind", legend =T, minimum=0.78, arrow =T, groups = hng)
qgraph(myhn, palette="colorblind", layout="spring",legend =T, minimum=0.78, arrow =T, groups = hng)
qgraph(myhn, palette="colorblind", layout="circle",legend =T, minimum=0.78, arrow =T, groups = hng)
names(hng)=c("HP-type","NE-type")
qgraph(myhn, palette="colorblind", layout="circle",legend =T, minimum=0.78, arrow =T, groups = hng)
qgraph(myhn, palette="colorblind", layout="circle",legend =T, minimum=0.78, arrow =T, groups = hng, grey=T)
qgraph(myhn, palette="colorblind", layout="circle",legend =T, minimum=0.8, arrow =T, groups = hng, grey=T)
myhn
myhn = dd[c(15:20,35:40),c(15:20,35:40)]
rowSums(myhn)
colSums(myhn)
qgraph(myhn, palette="colorblind", legend =T, minimum=0.8, arrow =T, groups = hng, grey=T)
myhn = dd[c(15:20,35:40),c(15:20,35:40)]
diag(myhn)=0
HP=c(1:6)
NE=c(7:12)
hng=list(HP, NE)
names(hng)=c("HP-type","NE-type")
qgraph(myhn, palette="colorblind", legend =T, minimum=0.8, arrow =T, groups = hng, grey=T)
qgraph(myhn, palette="colorblind", layout="circle",legend =T, minimum=0.8, arrow =T, groups = hng)
qgraph(myhn, palette="colorblind", layout="circle",legend =T, minimum=0.8, arrow =T, groups = hng, line=2.5)
GI= c(1:7)
GT= c(8:14)
HP= c(15:20)
GJ= c(21:27)
HI= c(28:34)
NE= c(35:40)
POA=c(41:47)
PDA=c(48:54)
PBA = c(55:60)
LPXBHR= c(61:84)
LPXBHxx=c(85:90)
mygroup = list(GI, GT, HP, GJ, HI, NE, POA, PDA,PBA, LPXBHR,LPXBHxx)
dd1=dd
diag(dd1)=0
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, legend=T)
names(mygroup) = c("GI","GT","HP","GJ","HI","NE","POA","PDA","PBA","LPXBHR","LPXBHR","LPXBHR","LPXBHxx")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, legend=T)
names(mygroup) = c("GI","GT","HP","GJ","HI","NE","POA","PDA","PBA",
"LPXBHR","LPXBHxx")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, legend=T)
mlp = dd1[61:90]
mlp
mlp = dd1[61:90,61:90]
mlp
mgro = list(1:24,25:31)
nr(mlp)
names(mgro)=c("LPXBHR","LPXBHxx")
mlp = dd1[61:90,61:90]
mgro = list(1:24,25:31)
names(mgro)=c("LPXBHR","LPXBHxx")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="diamond",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro)
mlp = dd1[61:90,61:90]
mgro = list(1:24,25:30)
names(mgro)=c("LPXBHR","LPXBHxx")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="diamond",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.03, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.1, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.2, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.3, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.3, palette = "pastel",
shape="circle",label.cex=3, label.scale.equal=T, layout="spring")
Q=qgraph(mlp, groups=mgro, vsize=2.5, minimum = 0.3, palette = "pastel",
shape="circle",label.cex=3, label.scale.equal=T, layout="circle")
rm(list = ls(all = T))
graphics.off()
library(SIS)
library(glmnet)
library(zoo)
install.packages("SIS")
library(glmnet)
library(SIS)
library(glmnet)
library(zoo)
myp = read.csv("electricity_monthly.csv", header = F, sep = ";")
mydate = as.character(myp[, 1])
st = which(mydate == "30.09.2010")
et = which(mydate == "31.07.2015")
myp1 = myp[(st:et), 2:92]
myp1 = as.matrix(myp1[, -15], nr = 59, nc = 90)
myp1 = matrix(as.numeric(myp1),59, 90)
for (i in 1:nrow(myp1)) {
for (j in 1:ncol(myp1)) {
if (myp1[i, j] < 0.01) {
myp1[i, j] = 0.01
}
}
}
rm(myp, st, et, i, j)
logr <- diff(log(myp1), lag=1)
sum(is.na(logr))
##plot
library(plot3D)
install.packages("plot3D")
##plot
library(plot3D)
#persp3D(z=logr, theta = 120)
persp3D(z=myp1,zlab="Price", ylab="Contracts", xlab="06.2000-07.2015")
ribbon3D (x = seq(0, 1, length.out = nrow(z)),
y = seq(0, 1, length.out = ncol(z)), z,
zlab="Price", ylab="Contracts", xlab="06.2000-07.2015", theta=30)
z=myp1
ribbon3D (x = seq(0, 1, length.out = nrow(z)),
y = seq(0, 1, length.out = ncol(z)), z,
zlab="Price", ylab="Contracts", xlab="06.2000-07.2015", theta=30)
#Clear variables and close windows
rm(list=ls(all=TRUE))
graphics.off()
install.packages("lattice")
install.packages("lattice")
#install.packages("lattice")
library("lattice")
load(file="fit1.RData")
str(completedData)
L = completedData
require(lattice)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/HU project/energy paper/SIS/Codes")
str(completedData)
load(file="fit1.RData")
str(completedData)
#dev.new()
contour(L, col=rainbow(9), xlab="Time", ylab="Type")
L = completedData
#dev.new()
contour(L, col=rainbow(9), xlab="Time", ylab="Type")
## read data
ele_spot = read.csv("electricity_monthly.csv", header = F, sep = ";", na.strings=c(""))
eledate = as.character(ele_spot[, 1])
st = which(eledate == "30.09.2010")
et = which(eledate == "31.07.2015")
eledata11 = ele_spot[(st:et), 2:92]
xx = t(eledata11[, -15])
xx1 = matrix(as.numeric(xx), nr = 90, nc = 59)
xx1 = t(xx1)
yy = log(xx1[2, ]) - log(xx1[1, ])
for ( i in 3: 59)
{
xx2 = log(xx1[i, ]) - log(xx1[i-1, ])
yy = rbind(yy, xx2)
}
rm(xx2)
yy[is.na(yy)] = log(0.01) -log(0.01)
sum(is.na(yy))
completedData = yy
str(completedData)
L = completedData
contour(L, col=rainbow(9), xlab="Time", ylab="Type")
## read data
ele_spot = read.csv("electricity_monthly.csv", header = F, sep = ";", na.strings=c(""))
eledate = as.character(ele_spot[, 1])
st = which(eledate == "30.09.2010")
et = which(eledate == "31.07.2015")
eledata11 = ele_spot[(st:et), 2:92]
## transform the nonstationary data to stationary
xx = t(eledata11[, -15])
## eliminate missing data before passing X and y to ncvreg
# The pattern of missing data numerically and grahpically
md.pattern(xx)
install.packages("mice")
library("mice")
aggr_plot = aggr(xx, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
## eliminate missing data before passing X and y to ncvreg
# The pattern of missing data numerically and grahpically
md.pattern(xx)
aggr_plot = aggr(xx, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
library("VIM")
install.packages("VIM")
library("VIM")
aggr_plot = aggr(yy, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data),
cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Regularization_Energy")
load("energyfullconn.RData")
head(dd)
GI= c(1:7)
GT= c(8:14)
HP= c(15:20)
GJ= c(21:27)
HI= c(28:34)
NE= c(35:40)
POA=c(41:47)
PDA=c(48:54)
PBA = c(55:60)
LPXBHR= c(61:84)
LPXBHxx=c(85:90)
mygroup = list(GI, GT, HP, GJ, HI, NE, POA, PDA,PBA, LPXBHR,LPXBHxx)
names(mygroup) = c("GI","GT","HP","GJ","HI","NE","POA","PDA","PBA",
"LPXBHR","LPXBHxx")
dd1=dd
diag(dd1)=0
#Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "colorblind")
#Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel")
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T)
library(qgraph)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, legend=T)
Q=qgraph(dd1, groups=mygroup, vsize=2.5, minimum = 0.003, palette = "pastel",
shape="circle",label.cex=2.5, label.scale.equal=T, legend=T)
library(xtable)
#GI contract
GIconn = dd[1:7,1:7]
GIconn
#GT contract
GTconn = dd[8:14,8:14]
#HP contract
HPconn = dd[15:20,15:20]
#GJ contract
GJconn = dd[21:27,21:27]
#HI
HIconn = dd[28:34,28:34]
#NE
NEconn = dd[35:40, 35:40]
#POA
POAconn =dd[41:47,41:47]
#PDA
PDAconn = dd[48:54,48:54]
#PBA
PBAconn = dd[55:60,55:60]
#LPXBHR
LPXBHRconn = dd[61:84,61:84]
#xtable(LPXBHRconn[,1:8])
#xtable(LPXBHRconn[,9:16])
xtable(LPXBHRconn[,17:24])
#LPXBHxx
LPXBHxxconn = dd[85:90, 85:90]
#Table 4.1
##For 11 different types, in total 90 contracts
#7,7,6,7,7,6,7,7,6,24,6
sectorname = c("GI","GT","HP","GJ","HI","NE","POA","PDA","PBA","LPXBHR","LPXBHxx")
#Table 4..
secconn = matrix(0, length(sectorname), length(sectorname))
mr= c(7,14,20,27,34,40,47,54,60,84,90)
mc= c(0,7,14,20,27,34,40,47,54,60,84)
for(i in 1:11){
for(j in 1:11){
secconn[i,j] = sum(dd[(mc[i]+1):mr[i],(mc[j]+1):mr[j] ])
}
}
#network plot
myd=secconn1
load("energyfullconn.RData")
rm(list=ls(all=T))
graphics.off()
# the coefficient matrix
load(file = "fit1.RData") # the output of fit1
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/HU project/energy paper/SIS/Codes")
# the coefficient matrix
load(file = "fit1.RData") # the output of fit1
plot.glmnet(fit1$fit)
plot.glmnet(fit1$fit, label = "TRUE")
setwd("~/Documents/GitHub/Regularization_Energy")
